import sqlite3
from datetime import datetime

class DatabaseManager:
    def __init__(self, db_path="database.db"):
        self.db_path = db_path

    def get_db_connection(self):
        conn = sqlite3.connect(self.db_path)
        conn.row_factory = sqlite3.Row  # Permite acessar colunas pelo nome
        return conn

    # ======================
    # SEÇÃO: Usuários
    # ======================
    def salvar_usuario(self, user_data): ...
    def carregar_usuario(self, username): ...
    def carregar_usuario_por_id(self, user_id): ...
    def carregar_todos_os_usuarios(self, perfil=None): ...
    def atualizar_usuario(self, usuario_data): ...
    def excluir_usuario(self, user_id): ...
    def get_user_id_by_username(self, username): ...

    # ======================
    # SEÇÃO: Registros
    # ======================
    def salvar_registro(self, registro_data): ...
    def carregar_registros(self, user_id): ...
    def atualizar_registro(self, registro_data): ...
    def excluir_registro(self, registro_id): ...

    # ======================
    # SEÇÃO: Fichas médicas
    # ======================
    def salvar_ficha_medica(self, ficha_data): ...
    def carregar_ficha_medica(self, paciente_id): ...
    def criar_paciente_e_ficha_inicial(self, paciente_data, medico_id, anamnese_data): ...

    # ======================
    # SEÇÃO: Exames
    # ======================
    def salvar_exame_laboratorial(self, ficha_exame): ...
    def buscar_exames_paciente(self, paciente_id): ...

    # ======================
    # SEÇÃO: Agendamentos
    # ======================
    def salvar_agendamento(self, agendamento_data): ...
    def buscar_agendamentos_paciente(self, paciente_id): ...
    def buscar_agendamentos_por_medico(self, medico_id): ...
    def buscar_todos_agendamentos(self): ...
    def atualizar_status_agendamento(self, agendamento_id, novo_status): ...

    # ======================
    # SEÇÃO: Vínculos
    # ======================
    def vincular_paciente_medico(self, paciente_id, medico_id): ...
    def obter_pacientes_por_medico(self, medico_id): ...
    def vincular_cuidador_paciente(self, cuidador_id, paciente_id): ...
    def carregar_cuidadores(self): ...
    def carregar_medicos(self): ...
    def medico_tem_acesso_a_paciente(self, medico_id, paciente_id): ...

    # ======================
    # SEÇÃO: Logs
    # ======================
    def salvar_log_acao(self, acao, usuario): ...
